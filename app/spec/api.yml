openapi: 3.0.1

#################### GENERAL ####################
info:
  title: BNB My Guest REST API
  description: >
    This is the REST API
    Of BNB My Guest Service
  contact:
    email: john.doe@bnb-my-guest.com
  version: 1.0.0
servers:
- url: http://localhost:3000
tags:
- name: Countries
  description: All the Country operations

#################### PATHS ####################
paths:

  # Country operations
  /countries:
    x-controller: countries
    get:
      summary: Get all countries
      x-operation: getAll
      tags:
        - Countries
      parameters:
        - $ref: "#/components/parameters/QueryPage"
        - $ref: "#/components/parameters/QueryPerPage"
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/PagedResponse"
                properties:
                  items:
                    $ref: "#/components/schemas/Country"
        400:
          $ref: "#/components/responses/BadRequestError"
        500:
          $ref: "#/components/responses/UnexpectedServerError"

  /countries/{countryId}:
    x-controller: countries
    get:
      summary: Get a country by id
      x-operation: getById
      tags:
        - Countries
      parameters:
        - name: countryId
          in: path
          schema:
            type: string
            example: FRA
          required: true
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/UnexpectedServerError"
 # City operations
  /cities:
      x-controller: cities
      get:
        summary: Get all cities
        x-operation: getAll
        tags:
          - Cities
        parameters:
          - name: countryId
            in: query
            schema: 
              type: string
              example : FRA
            required: false
          - $ref: "#/components/parameters/QueryPage"
          - $ref: "#/components/parameters/QueryPerPage"
        responses:
          200:
            description: Success response
            content:
              application/json:
                schema:
                  type: object
                  allOf:
                    - $ref: "#/components/schemas/PagedResponse"
                  properties:
                    items:
                      $ref: "#/components/schemas/City"
          400:
            $ref: "#/components/responses/BadRequestError"
          500:
            $ref: "#/components/responses/UnexpectedServerError"

  /cities/{cityId}:
    x-controller: cities
    get:
      summary: Get a city by id
      x-operation: getById
      tags:
        - Cities
      parameters:
        - name: cityId
          in: path
          schema:
            type: string
            example: FRA_TOU
          required: true
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/City"
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/UnexpectedServerError"

  # Host operations
  /hosts:
      x-controller: hosts
      get:
        summary: Get all hosts
        x-operation: getAll
        tags:
          - Hosts
        parameters:
          - $ref: "#/components/parameters/QueryPage"
          - $ref: "#/components/parameters/QueryPerPage"
        responses:
          200:
            description: Success response
            content:
              application/json:
                schema:
                  type: object
                  allOf:
                    - $ref: "#/components/schemas/PagedResponse"
                  properties:
                    items:
                      $ref: "#/components/schemas/Host"
          400:
            $ref: "#/components/responses/BadRequestError"
          500:
            $ref: "#/components/responses/UnexpectedServerError"
      post:
        summary: Add an host
        x-operation: addNewHost
        tags:
          - Hosts
        parameters:
          - name: firstname
            in: query
            schema:
              type: string
              example: Jeanne
            required: true
          - name: lastname
            in: query
            schema:
              type: string
              example: Dark
            required: true
          - name: email
            in: query
            schema:
              type: string
              example: jeanne.dark@mail.com
            required: true
          - name: street
            in: query
            schema:
              type: string
              example: Place Jeanne Dark
            required: true
          - name: zipCode
            in: query
            schema:
              type: string
              example: "76000"
            required: true
          - name: city
            in: query
            schema:
              type: string
              example: Rouen
            required: true
          - name: country
            in: query
            schema:
              type: string
              example: France
            required: true
          - name: phone
            in: query
            schema:
              type: string
              example: "+33623456780"
            required: true
          - name: fax
            in: query
            schema:
              type: string
              example: Place Jeanne Dark
            required: false
          - name: email2
            in: query
            schema:
              type: string
              example: jeanne.dark76@mail.com
            required: false
        responses:
          200:
            description: Success response
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Host"
          400:
            $ref: "#/components/responses/BadRequestError"
          404:
            $ref: "#/components/responses/NotFoundError"
          500:
            $ref: "#/components/responses/UnexpectedServerError"
      put:
        summary: Updates an host
        x-operation: updateHost
        tags : 
          - Hosts
        parameters: 
          - name: id
            in: query
            schema:
              type: string
              example: cdeaf592-ebfa-41dc-a02b-582afbfe7e40
            required: true
          - name: firstname
            in: query
            schema:
              type: string
              example: Jeanne
          - name: lastname
            in: query
            schema:
              type: string
              example: Dark
          - name: email
            in: query
            schema:
              type: string
              example: jeanne.dark@mail.com
          - name: street
            in: query
            schema:
              type: string
              example: Place Jeanne Dark
          - name: zipCode
            in: query
            schema:
              type: string
              example: "76000"
          - name: city
            in: query
            schema:
              type: string
              example: Rouen
          - name: country
            in: query
            schema:
              type: string
              example: France
          - name: phone
            in: query
            schema:
              type: string
              example: "+33623456780"
          - name: fax
            in: query
            schema:
              type: string
              example: Place Jeanne Dark
          - name: email2
            in: query
            schema:
              type: string
              example: jeanne.dark76@mail.com
        responses:
          200:
            description: Success response
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Host"
          400:
            $ref: "#/components/responses/BadRequestError"
          404:
            $ref: "#/components/responses/NotFoundError"
          500:
            $ref: "#/components/responses/UnexpectedServerError"
      delete:
        summary: Delete an host
        x-operation: deleteHost
        tags:
          - Hosts
        parameters:
          - name: hostId
            in: query
            schema:
              type: string
              example: cdeaf592-ebfa-41dc-a02b-582afbfe7e40
            required: true
        responses:
          200:
            description: The resource was deleted successfully.
          400:
            $ref: "#/components/responses/BadRequestError"
          500:
            $ref: "#/components/responses/UnexpectedServerError" 

  /hosts/{hostId}:
    x-controller: hosts
    get:
      summary: Get a host by id
      x-operation: getById
      tags:
        - Hosts
      parameters:
        - name: hostId
          in: path
          schema:
            type: string
            example: cdeaf592-ebfa-41dc-a02b-582afbfe7e40
          required: true
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Host"
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/UnexpectedServerError"
         
  # Guest operations
  /guests:
      x-controller: guests
      get:
        summary: Get all guests
        x-operation: getAll
        tags:
          - Guests
        parameters:
          - $ref: "#/components/parameters/QueryPage"
          - $ref: "#/components/parameters/QueryPerPage"
        responses:
          200:
            description: Success response
            content:
              application/json:
                schema:
                  type: object
                  allOf:
                    - $ref: "#/components/schemas/PagedResponse"
                  properties:
                    items:
                      $ref: "#/components/schemas/Guest"
          400:
            $ref: "#/components/responses/BadRequestError"
          500:
            $ref: "#/components/responses/UnexpectedServerError"
      post:
        summary: Add a guest
        x-operation: addNewGuest
        tags:
          - Guests
        parameters:
          - name: firstname
            in: query
            schema:
              type: string
              example: Jeanne
            required: true
          - name: lastname
            in: query
            schema:
              type: string
              example: Dark
            required: true
          - name: email
            in: query
            schema:
              type: string
              example: jeanne.dark@mail.com
            required: true
          - name: street
            in: query
            schema:
              type: string
              example: Place Jeanne Dark
            required: true
          - name: zipCode
            in: query
            schema:
              type: string
              example: "76000"
            required: true
          - name: city
            in: query
            schema:
              type: string
              example: Rouen
            required: true
          - name: country
            in: query
            schema:
              type: string
              example: France
            required: true
          - name: language
            in: query
            schema:
              type: string
              enum:
                - EN 
                - FR
                - DE 
              default: EN
              example: FR
            required: true
          - name: currency
            in: query
            schema:
              type: string
              enum:
                - EUR
                - USD 
              default: EUR
              example: EUR
            required: true
          
        responses:
          200:
            description: Success response
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Guest"
          400:
            $ref: "#/components/responses/BadRequestError"
          404:
            $ref: "#/components/responses/NotFoundError"
          500:
            $ref: "#/components/responses/UnexpectedServerError"
      put:
        summary: Updates a guest
        x-operation: updateGuest
        tags : 
          - Guests
        parameters: 
          - name: id
            in: query
            schema:
              type: string
              example: cdeaf592-ebfa-41dc-a02b-582afbfe7e40
            required: true
          - name: firstname
            in: query
            schema:
              type: string
              example: Jeanne
          - name: lastname
            in: query
            schema:
              type: string
              example: Dark
          - name: email
            in: query
            schema:
              type: string
              example: jeanne.dark@mail.com
          - name: street
            in: query
            schema:
              type: string
              example: Place Jeanne Dark
          - name: zipCode
            in: query
            schema:
              type: string
              example: "76000"
          - name: city
            in: query
            schema:
              type: string
              example: Rouen
          - name: country
            in: query
            schema:
              type: string
              example: France
          - name: language
            in: query
            schema:
              type: string
              enum:
                - EN 
                - FR
                - DE 
              default: EN
              example: FR
          - name: currency
            in: query
            schema:
              type: string
              enum:
                - EUR
                - USD 
              default: EUR
              example: EUR
        responses:
          200:
            description: Success response
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Guest"
          400:
            $ref: "#/components/responses/BadRequestError"
          404:
            $ref: "#/components/responses/NotFoundError"
          500:
            $ref: "#/components/responses/UnexpectedServerError"
      delete:
        summary: Delete a guest
        x-operation: deleteGuest
        tags:
          - Guests
        parameters:
          - name: guestId
            in: query
            schema:
              type: string
              example: cdeaf592-ebfa-41dc-a02b-582afbfe7e40
            required: true
        responses:
          200:
            description: The resource was deleted successfully.
          400:
            $ref: "#/components/responses/BadRequestError"
          500:
            $ref: "#/components/responses/UnexpectedServerError" 

  /guests/{guestId}:
    x-controller: guests
    get:
      summary: Get a guest by id
      x-operation: getById
      tags:
        - Guests
      parameters:
        - name: guestId
          in: path
          schema:
            type: string
            example: cdeaf592-ebfa-41dc-a02b-582afbfe7e40
          required: true
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Guest"
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/UnexpectedServerError"

  # Apartment operations
  /apartments:
    x-controller: apartments
    get:
      summary: Get all apartments
      x-operation: getAll
      tags:
        - Apartments
      parameters:
        - name: cityId
          in: query
          schema: 
              type: string
              example : GRC_ATH
          required: false
        - name : hostId
          in: query
          schema: 
              type: string
              example : 4d04549d-1f80-4d2b-b33c-1e8b5896d6bd
          required: false
        - $ref: "#/components/parameters/QueryPage"
        - $ref: "#/components/parameters/QueryPerPage"
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/PagedResponse"
                properties:
                  items:
                    $ref: "#/components/schemas/Apartment"
        400:
          $ref: "#/components/responses/BadRequestError"
        500:
          $ref: "#/components/responses/UnexpectedServerError"
    post:
      summary: Add an apartment
      x-operation: addNewApartment
      tags:
        - Apartments
      parameters:
        - name: hostId
          in: query
          schema:
            type: string
            example: 3fde97ed-563e-4850-ac07-95b57d51b736
          required: true
        - name: cityId
          in: query
          schema:
            type: string
            example: CZE_PRA
          required: true
        - name: bedrooms
          in: query
          schema:
            type: integer
            example: 4
          required: true
        - name: price
          in: query
          schema:
            type: number
            example: 266.45
          required: true
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Apartment"
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/UnexpectedServerError"
    put:
      summary: Updates an apartment
      x-operation: updateApartment
      tags : 
        - Apartments
      parameters:
        - name: apartmentId
          in: query
          schema:
            type: string
            example: ca632623-c524-4e30-8d15-e889aac75661
          required: true  
        - name: hostId
          in: query
          schema:
            type: string
            example: 3fde97ed-563e-4850-ac07-95b57d51b736
        - name: cityId
          in: query
          schema:
            type: string
            example: CZE_PRA
        - name: bedrooms
          in: query
          schema:
            type: integer
            example: 4
        - name: price
          in: query
          schema:
            type: number
            example: 266.45
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Apartment"
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/UnexpectedServerError"
    delete:
      summary: Delete an apartment
      x-operation: deleteApartment
      tags:
        - Apartments
      parameters:
        - name: apartmentId
          in: query
          schema:
            type: string
            example: cdeaf592-ebfa-41dc-a02b-582afbfe7e40
          required: true
      responses:
        200:
          description: The resource was deleted successfully.
        400:
          $ref: "#/components/responses/BadRequestError"
        500:
          $ref: "#/components/responses/UnexpectedServerError" 


  /apartments/{apartmentId}:
    x-controller: apartments
    get:
      summary: Get an apartment by id
      x-operation: getById
      tags:
        - Apartments
      parameters:
        - name: apartmentId
          in: path
          schema:
            type: string
            example: ca632623-c524-4e30-8d15-e889aac75661
          required: true
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Apartment"
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/UnexpectedServerError"

  # Rental operations
  /rentals:
    x-controller: rentals
    get:
      summary: Get all rentals
      x-operation: getAll
      tags:
        - Rentals
      parameters:
        - name: apartmentId
          in: query
          schema: 
              type: string
              example : ff5370fc-2031-439b-8b97-838e722b0ba7
          required: false
        - name : guestId
          in: query
          schema: 
              type: string
              example : 6ecbbd2d-efc0-4943-8042-70f9bb24c07d
          required: false
        - $ref: "#/components/parameters/QueryPage"
        - $ref: "#/components/parameters/QueryPerPage"
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/PagedResponse"
                properties:
                  items:
                    $ref: "#/components/schemas/Rental"
        400:
          $ref: "#/components/responses/BadRequestError"
        500:
          $ref: "#/components/responses/UnexpectedServerError"
    post:
      summary: Add a rental
      x-operation: addNewRental
      tags:
        - Rentals
      parameters:
        - name: id
          in: query
          schema:
            type: string
            example: 6bb165a8-7c1e-48a8-9b83-8adc73d0edde
          required: true
        - name: guestId
          in: query
          schema:
            type: string
            example: e2eb3599-0da4-47c3-a7db-a7b3e7c632ff
          required: true
        - name: apartmentId
          in: query
          schema:
            type: string
            example: e8c6ef7d-99f2-4031-93b1-ecfd1bff1fda
          required: true
        - name: checkIn
          in: query
          schema:
            type: string
            format: date
            example: 2019-03-24
          required: true
        - name: checkOut
          in: query
          schema:
            type: string
            format: date
            example: 2019-04-04
          required: true
        - name: status
          in: query
          schema:
            type: string
            enum:
              - WAITING_FOR_PAYMENT
              - PAID
              - CANCELLED 
            default: WAITING_FOR_PAYMENT
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rental"
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/UnexpectedServerError"
    put:
      summary: Updates a rental status to paid
      x-operation: updateRental
      tags : 
        - Rentals
      parameters:
        - name: id
          in: query
          schema:
            type: string
            example: 6bb165a8-7c1e-48a8-9b83-8adc73d0edde
          required: true
        - name: status
          in: query
          schema:
            type: string
            enum:
              - WAITING_FOR_PAYMENT
              - PAID
              - CANCELLED 
            default: PAID
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rental"
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/UnexpectedServerError"
    delete:
      summary: Delete a rental (cancel)
      x-operation: deleteRental
      tags:
        - Rentals
      parameters:
        - name: rentalId
          in: query
          schema:
            type: string
            example: cdeaf592-ebfa-41dc-a02b-582afbfe7e40
          required: true
      responses:
        200:
          description: The resource was deleted successfully.
        400:
          $ref: "#/components/responses/BadRequestError"
        500:
          $ref: "#/components/responses/UnexpectedServerError" 


  /rentals/{rentalId}:
    x-controller: rentals
    get:
      summary: Get a rental by id
      x-operation: getById
      tags:
        - Rentals
      parameters:
        - name: rentalId
          in: path
          schema:
            type: string
            example: ca632623-c524-4e30-8d15-e889aac75661
          required: true
      responses:
        200:
          description: Success response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rental"
        400:
          $ref: "#/components/responses/BadRequestError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/UnexpectedServerError"


          
components:

  #################### SCHEMAS ####################
  schemas:

    Country:
      type: object
      properties:
        id:
          type: string
          example: FRA
        country:
          type: string
          example: France
      required:
        - id
        - country

    City:
      type: object
      properties:
        id: 
          type: string
          example: FRA_TOU
        countryId : 
          type: string
          example : FRA
        city:
          type: string
          example: Toulouse
      required:
        - id 
        - countryId 
        - city
 
    Person :
      type: object
      properties:
        id: 
          type: string
          example: "71d34235-f3b2-4a44-866a-c2e5357488b3"
        firstname:
          type: string
          example : Jeanne
        lastname:
          type: string
          example : Dark
        email :
          type : string
          example: jeanne.dark@mail.com
        address:
          type: object
          properties:
            street:
                type: string
                example : Place Jeanne Dark
            zipCode:
                type: string
                minLength: 5
                maxLength: 5
                pattern: '[0-9]{5}'
                example : "76000"
            city:
                type: string
                example : Rouen
            country : 
                type: string
                example : France
          required:
            - street
            - zipCode
            - city
            - country
      required:
        - id
        - firstname
        - lastname
        - email
        - address

    Host:
      allOf:
        - $ref: "#/components/schemas/Person"
        - type: object
          properties:
            contact:
              type: object
              properties:
                phone:
                  type: string
                  minLength: 12
                  maxLength: 12
                  pattern: \+[0-9]{11}
                  example : "+33623456780"
                fax: 
                  type: string
                  minLength: 12
                  maxLength: 12
                  pattern: '\+[0-9]{11}'
                  example : "+33623456780"
                email:
                  type : string
                  example: jeanne.dark@mail.com
              required:
                - phone

    Guest:
      allOf:
        - $ref: "#/components/schemas/Person"
        - type: object
          properties:
            preferences:
              type : object
              properties:
                language : 
                  type: string
                  enum:
                    - EN 
                    - FR
                    - DE 
                  default: EN
                currency:
                  type: string
                  enum:
                    - EUR
                    - USD 
                  default: EUR
              required:
                - language
                - currency

    Apartment:
      type: object
      properties:
        id: 
          type: string
          example: dba93093-14d5-4442-806f-3619f89e0d15
        hostId:
          type: string
          example: ee562813-6691-4182-bbcd-a634966af884
        cityId:
          type: string
          minLength: 7
          maxLength: 7
          example: FRA_TOU
        bedrooms:
          type: integer
          minimum : 0
          example: 3
        price:
          type: number
          minimum : 0
          example: 186.47
      required:
        - id
        - hostId
        - cityId
        - bedrooms
        - price

    Rental:
      type: object
      properties:
        id: 
          type: string
          example : ca632623-c524-4e30-8d15-e889aac75661
        guestId: 
          type: string
          example : 6ecbbd2d-efc0-4943-8042-70f9bb24c07d
        apartmentId : 
          type: string
          example : ff5370fc-2031-439b-8b97-838e722b0ba7
        checkIn:
          type : string
          format: date
          example: 2020-12-24
        checkOut:
          type: string
          format : date
          example : 2020-12-28
        status :
          type: string
          enum:
            - WAITING_FOR_PAYMENT
            - PAID
            - CANCELLED 
          default: WAITING_FOR_PAYMENT
      required:
        - id
        - guestId
        - apartmentId
        - checkIn
        - checkOut
        - status
        
    PagedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        page:
          type: integer
          format: int32
          example: 1
        perPage:
          type: integer
          format: int32
          example: 10
        totalItems:
          type: integer
          format: int32
          example: 155
        totalPages:
          type: integer
          format: int32
          example: 16
      required:
        - page
        - perPage
        - totalItems
        - totalPages

    Error:
      type: object
      properties:
        code:
          type: string
          example: CLI_123
        label:
          type: string
          example: Something bad happened...
      required:
        - code
        - label

  #################### PARAMETERS ####################
  parameters:
    
    QueryPage:
      name: page
      in: query
      required: false
      schema:
        type: integer
        format: int32
        default: 1
        example: 5

    QueryPerPage:
      name: perPage
      in: query
      required: false
      schema:
        type: integer
        format: int32            
        default: 10
        example: 20

  #################### RESPONSES ####################
  responses:

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    UnexpectedServerError:
      description: Unexpected Server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
